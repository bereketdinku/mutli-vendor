import * as h3 from 'h3';
import { H3Event } from 'h3';
import * as __internal_types from '../internal/types.cjs';
import { FileRouter, RouteHandlerOptions } from '../internal/types.cjs';
export { FileRouter, UTFiles } from '../internal/types.cjs';
import * as _uploadthing_shared from '@uploadthing/shared';
import { Json, UploadThingError } from '@uploadthing/shared';

type CreateBuilderOptions<TErrorShape extends Json> = {
    errorFormatter: (err: UploadThingError) => TErrorShape;
};

type MiddlewareArgs = {
    req: undefined;
    res: undefined;
    event: H3Event;
};
declare const createUploadthing: <TErrorShape extends Json>(opts?: CreateBuilderOptions<TErrorShape>) => (input: _uploadthing_shared.FileRouterInputConfig) => __internal_types.UploadBuilder<{
    _input: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _metadata: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _middlewareArgs: MiddlewareArgs;
    _errorShape: TErrorShape;
    _errorFn: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _output: "unsetMarker" & {
        __brand: "unsetMarker";
    };
}>;
declare const createRouteHandler: <TRouter extends FileRouter>(opts: RouteHandlerOptions<TRouter>) => h3.EventHandler<h3.EventHandlerRequest, Promise<{
    slug: keyof TRouter;
    config: _uploadthing_shared.ExpandedRouteConfig;
}[] | __internal_types.inferErrorShape<TRouter> | readonly ({
    readonly key: string;
    readonly fileName: string;
    readonly fileUrl: string;
    readonly pollingJwt: string;
    readonly pollingUrl: string;
    readonly contentDisposition: "inline" | "attachment";
    readonly customId: string | null;
    readonly fileType: _uploadthing_shared.FileRouterInputKey;
    readonly url: string;
    readonly fields: {
        readonly [x: string]: string;
    };
} | {
    readonly key: string;
    readonly fileName: string;
    readonly fileUrl: string;
    readonly pollingJwt: string;
    readonly pollingUrl: string;
    readonly contentDisposition: "inline" | "attachment";
    readonly customId: string | null;
    readonly fileType: _uploadthing_shared.FileRouterInputKey;
    readonly urls: readonly string[];
    readonly uploadId: string;
    readonly chunkSize: number;
    readonly chunkCount: number;
})[] | "OK">>;
/**
 * @deprecated Use {@link createRouteHandler} instead
 */
declare const createH3EventHandler: <TRouter extends FileRouter>(opts: RouteHandlerOptions<TRouter>) => h3.EventHandler<h3.EventHandlerRequest, Promise<{
    slug: keyof TRouter;
    config: _uploadthing_shared.ExpandedRouteConfig;
}[] | __internal_types.inferErrorShape<TRouter> | readonly ({
    readonly key: string;
    readonly fileName: string;
    readonly fileUrl: string;
    readonly pollingJwt: string;
    readonly pollingUrl: string;
    readonly contentDisposition: "inline" | "attachment";
    readonly customId: string | null;
    readonly fileType: _uploadthing_shared.FileRouterInputKey;
    readonly url: string;
    readonly fields: {
        readonly [x: string]: string;
    };
} | {
    readonly key: string;
    readonly fileName: string;
    readonly fileUrl: string;
    readonly pollingJwt: string;
    readonly pollingUrl: string;
    readonly contentDisposition: "inline" | "attachment";
    readonly customId: string | null;
    readonly fileType: _uploadthing_shared.FileRouterInputKey;
    readonly urls: readonly string[];
    readonly uploadId: string;
    readonly chunkSize: number;
    readonly chunkCount: number;
})[] | "OK">>;

export { createH3EventHandler, createRouteHandler, createUploadthing };
